import logging
import requests
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from database import Database
import config
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TipCalculatorBot:
    def __init__(self):
        self.db = Database()
        self.currency_rates = {}
        self.last_currency_update = None
        self.setup_keyboards()

    def setup_keyboards(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥"""
        self.main_keyboard = ReplyKeyboardMarkup(
            [
                [KeyboardButton("/tip"), KeyboardButton("/convert")],
                [KeyboardButton("/history"), KeyboardButton("/clear_history")],
                [KeyboardButton("/set_default_tip"), KeyboardButton("/help")]
            ],
            resize_keyboard=True
        )

        self.tip_examples_keyboard = ReplyKeyboardMarkup(
            [
                [KeyboardButton("/tip 2000 15% 4")],
                [KeyboardButton("/tip 1500 10% 2")],
                [KeyboardButton("/tip 3000 def 3")],
                [KeyboardButton("–ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )

        self.convert_examples_keyboard = ReplyKeyboardMarkup(
            [
                [KeyboardButton("/convert 100 USD")],
                [KeyboardButton("/convert 50 EUR")],
                [KeyboardButton("–ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )

    async def update_currency_rates(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å —Å–∞–π—Ç–∞ –¶–ë –†–§"""
        try:
            response = requests.get('https://www.cbr-xml-daily.ru/daily_json.js')
            data = response.json()
            self.currency_rates = {
                'USD': data['Valute']['USD']['Value'],
                'EUR': data['Valute']['EUR']['Value'],
            }
            self.last_currency_update = datetime.now()
            logger.info("–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}")

    async def get_currency_rate(self, currency_code):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã"""
        currency_code = currency_code.upper()
        if currency_code == 'RUB':
            return 1.0
        
        if not self.last_currency_update or (datetime.now() - self.last_currency_update).days >= 1:
            await self.update_currency_rates()
        
        return self.currency_rates.get(currency_code)

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        default_tip = self.db.get_default_tip(user.id)
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —á–∞–µ–≤—ã—Ö.\n"
            f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —á–∞–µ–≤—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default_tip}%\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º",
            reply_markup=self.main_keyboard
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        user_id = update.effective_user.id
        default_tip = self.db.get_default_tip(user_id)
        
        help_text = f"""
üìù –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:

/tip <—Å—É–º–º–∞> [–ø—Ä–æ—Ü–µ–Ω—Ç] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫] - –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —á–∞–µ–≤—ã–µ
–ï—Å–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {default_tip}%
–ü—Ä–∏–º–µ—Ä—ã:
/tip 2000 15% 4 - —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞
/tip 2000 4     - –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ({default_tip}%) –¥–ª—è 4 —á–µ–ª–æ–≤–µ–∫
/tip 2000       - –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—á–µ—Ç —á–∞–µ–≤—ã—Ö

/convert <—Å—É–º–º–∞> <–≤–∞–ª—é—Ç–∞> - –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä—É–±–ª–∏ (USD, EUR)
–ü—Ä–∏–º–µ—Ä: /convert 100 USD

/history - –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—á–µ—Ç–æ–≤
/clear_history - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—á–µ—Ç–æ–≤
/set_default_tip <–ø—Ä–æ—Ü–µ–Ω—Ç> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
"""
        await update.message.reply_text(
            help_text,
            reply_markup=self.main_keyboard
        )

    async def show_tip_examples(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /tip"""
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ —á–∞–µ–≤—ã—Ö:",
            reply_markup=self.tip_examples_keyboard
        )

    async def show_convert_examples(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /convert"""
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç:",
            reply_markup=self.convert_examples_keyboard
        )

    async def back_to_main(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await update.message.reply_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=self.main_keyboard
        )

    async def convert_currency(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /convert"""
        try:
            args = context.args if context.args else update.message.text.split()[1:]
            
            if len(args) < 2:
                await update.message.reply_text(
                    "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤. –ü—Ä–∏–º–µ—Ä: /convert 100 USD",
                    reply_markup=self.convert_examples_keyboard
                )
                return

            amount = float(args[0])
            currency = args[1].upper()

            rate = await self.get_currency_rate(currency)
            if not rate:
                await update.message.reply_text(
                    f"–í–∞–ª—é—Ç–∞ {currency} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –î–æ—Å—Ç—É–ø–Ω—ã–µ: USD, EUR",
                    reply_markup=self.convert_examples_keyboard
                )
                return

            result = amount * rate
            await update.message.reply_text(
                f"üßæ –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:\n"
                f"{amount:.2f} {currency} = {result:.2f} RUB\n"
                f"–ö—É—Ä—Å –¶–ë –†–§: 1 {currency} = {rate:.2f} RUB",
                reply_markup=self.main_keyboard
            )

        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ convert_currency: {e}")
            await update.message.reply_text(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–∏–º–µ—Ä: /convert 100 USD",
                reply_markup=self.convert_examples_keyboard
            )

    async def calculate_tip(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tip"""
        try:
            user_id = update.effective_user.id
            args = context.args if context.args else update.message.text.split()[1:]
            
            if not args:
                await update.message.reply_text(
                    "–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—É–º–º–∞. –ü—Ä–∏–º–µ—Ä: /tip 2000 15% 4",
                    reply_markup=self.tip_examples_keyboard
                )
                return

            amount_str = ''.join(c for c in args[0] if c.isdigit() or c == '.')
            amount = float(amount_str) if amount_str else 0
            
            tip_percent = self.db.get_default_tip(user_id)
            people = 1
            
            if len(args) > 1:
                if any(c in args[1] for c in ['%', 'd', 'e', 'f']):
                    percent_str = ''.join(c for c in args[1] if c.isdigit())
                    if percent_str:
                        tip_percent = int(percent_str)
                    
                    if len(args) > 2:
                        people_str = ''.join(c for c in args[2] if c.isdigit())
                        if people_str:
                            people = int(people_str)
                else:
                    people_str = ''.join(c for c in args[1] if c.isdigit())
                    if people_str:
                        people = int(people_str)

            if amount <= 0 or tip_percent <= 0 or people <= 0:
                await update.message.reply_text(
                    "–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏",
                    reply_markup=self.tip_examples_keyboard
                )
                return

            tip_amount = amount * tip_percent / 100
            total = amount + tip_amount
            per_person = total / people

            self.db.save_calculation(user_id, amount, tip_percent, total, per_person if people > 1 else None)

            response = (
                f"üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω {tip_percent}%):\n"
                f"‚Ä¢ –°—É–º–º–∞: {amount:.2f} ‚ÇΩ\n"
                f"‚Ä¢ –ß–∞–µ–≤—ã–µ: {tip_amount:.2f} ‚ÇΩ\n"
                f"‚Ä¢ –ò—Ç–æ–≥–æ: {total:.2f} ‚ÇΩ"
            )
            if people > 1:
                response += f"\n‚Ä¢ –° –∫–∞–∂–¥–æ–≥–æ: {per_person:.2f} ‚ÇΩ"

            await update.message.reply_text(
                response,
                reply_markup=self.main_keyboard
            )

        except (ValueError, IndexError) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ calculate_tip: {e}")
            await update.message.reply_text(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü—Ä–∏–º–µ—Ä—ã:\n"
                "/tip 2000 15% 4\n"
                "/tip 2000 4\n"
                "/tip 2000",
                reply_markup=self.tip_examples_keyboard
            )

    async def show_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history"""
        user_id = update.effective_user.id
        history = self.db.get_history(user_id)

        if not history:
            await update.message.reply_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—á–µ—Ç–æ–≤",
                reply_markup=self.main_keyboard
            )
            return

        response = "üìä –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤:\n"
        for calc in history[-5:]:
            response += (
                f"{calc['timestamp']}: {calc['amount']} ‚ÇΩ + {calc['tip_percent']}% = "
                f"{calc['total']:.2f} ‚ÇΩ"
            )
            if calc['per_person']:
                response += f" (—Å –∫–∞–∂–¥–æ–≥–æ: {calc['per_person']:.2f} ‚ÇΩ)"
            response += "\n"

        await update.message.reply_text(
            response,
            reply_markup=self.main_keyboard
        )

    async def clear_history(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear_history"""
        user_id = update.effective_user.id
        deleted_count = self.db.clear_history(user_id)
        
        if deleted_count > 0:
            await update.message.reply_text(
                f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏",
                reply_markup=self.main_keyboard
            )
        else:
            await update.message.reply_text(
                "‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ —É–∂–µ –ø—É—Å—Ç–∞",
                reply_markup=self.main_keyboard
            )

    async def set_default_tip(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_default_tip"""
        try:
            if not context.args:
                await update.message.reply_text(
                    "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç. –ü—Ä–∏–º–µ—Ä: /set_default_tip 15",
                    reply_markup=self.main_keyboard
                )
                return
            
            percent_str = ''.join(c for c in context.args[0] if c.isdigit())
            tip_percent = int(percent_str) if percent_str else 0
            
            if tip_percent <= 0 or tip_percent > 100:
                await update.message.reply_text(
                    "–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100",
                    reply_markup=self.main_keyboard
                )
                return

            user_id = update.effective_user.id
            self.db.set_default_tip(user_id, tip_percent)
            await update.message.reply_text(
                f"–ü—Ä–æ—Ü–µ–Ω—Ç —á–∞–µ–≤—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {tip_percent}%",
                reply_markup=self.main_keyboard
            )

        except (ValueError, IndexError):
            await update.message.reply_text(
                "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç. –ü—Ä–∏–º–µ—Ä: /set_default_tip 15",
                reply_markup=self.main_keyboard
            )

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        
        if text == "/tip":
            await self.show_tip_examples(update, context)
        elif text == "/convert":
            await self.show_convert_examples(update, context)
        elif text == "–ù–∞–∑–∞–¥":
            await self.back_to_main(update, context)
        elif text.startswith("/tip "):
            await self.calculate_tip(update, context)
        elif text.startswith("/convert "):
            await self.convert_currency(update, context)
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º",
                reply_markup=self.main_keyboard
            )

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    bot = TipCalculatorBot()
    application = Application.builder().token(config.TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("help", bot.help_command))
    application.add_handler(CommandHandler("tip", bot.calculate_tip))
    application.add_handler(CommandHandler("convert", bot.convert_currency))
    application.add_handler(CommandHandler("history", bot.show_history))
    application.add_handler(CommandHandler("clear_history", bot.clear_history))
    application.add_handler(CommandHandler("set_default_tip", bot.set_default_tip))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()